<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue中computed和watch的区别</title>
    <url>/2020/11/09/computedAndMethods/</url>
    <content><![CDATA[<h4 id="computed会基于响应式依赖进行缓存，而watch却不会"><a href="#computed会基于响应式依赖进行缓存，而watch却不会" class="headerlink" title="computed会基于响应式依赖进行缓存，而watch却不会"></a>computed会基于响应式依赖进行缓存，而watch却不会</h4><h6 id="示例代码如下："><a href="#示例代码如下：" class="headerlink" title="示例代码如下："></a>示例代码如下：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">  </span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;p&gt;初始数据：&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;br &#x2F;&gt;</span><br><span class="line">    &lt;p&gt;computed 1次的数据：&#123;&#123; reverseComputed &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;computed 2次的数据：&#123;&#123; reverseComputed &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;computed 3次的数据：&#123;&#123; reverseComputed &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;br &#x2F;&gt;</span><br><span class="line">    &lt;p&gt;method 1次的数据：&#123;&#123; reverseMethods() &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;method 2次的数据：&#123;&#123; reverseMethods() &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;method 3次的数据：&#123;&#123; reverseMethods() &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cn.vuejs.org&#x2F;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          msg: &#39;hello world!&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        reverseMethods() &#123;</span><br><span class="line">          console.log(222)</span><br><span class="line">          return this.msg.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        reverseComputed() &#123;</span><br><span class="line">          console.log(111)</span><br><span class="line">          return this.msg.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>结果显示如下<br><img src="/2020/11/09/computedAndMethods/img1.jpg" alt="img1"></li>
<li>使用computed计算属性，“111”只打印了一次，说明后续操作直接调用缓存中的值，使用methods方法，“222”打印了3次，说明每次调用methods方法，都会执行一次该方法</li>
</ul>
<h4 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h4><ul>
<li>如果一个数据依赖多个其他数据（多对一），且只想根据依赖数据得到另外一个数据，此时用computed</li>
<li>如果一个数据改变涉及到多个其他相关操作（一对多），比如调用一个函数，改变其他数据等等，此时使用watch</li>
</ul>
]]></content>
      <categories>
        <category>Vue的学习</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>git log中文乱码问题</title>
    <url>/2020/11/17/git-log%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>参考链接：<a href="https://blog.csdn.net/sunjinshengli/article/details/81283009">《git- win10 cmd git log 中文乱码 解决方法》
</a></p>
</blockquote>
<h3 id="问题描述：在终端：-git-log之后，commit的中文信息发生乱码"><a href="#问题描述：在终端：-git-log之后，commit的中文信息发生乱码" class="headerlink" title="问题描述：在终端：$ git log之后，commit的中文信息发生乱码"></a>问题描述：在终端：$ git log之后，commit的中文信息发生乱码</h3><p><img src="/2020/11/17/git-log%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0.jpg" alt="问题"></p>
<h4 id="解决步骤如下："><a href="#解决步骤如下：" class="headerlink" title="解决步骤如下："></a>解决步骤如下：</h4><h5 id="一、-添加环境变量"><a href="#一、-添加环境变量" class="headerlink" title="一、 添加环境变量"></a>一、 添加环境变量</h5><ol>
<li>任意打开一个文件夹，找到此电脑，右键选择属性，进入计算机属性界面<br><img src="/2020/11/17/git-log%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%AD%A5%E9%AA%A4%E4%B8%80.jpg" alt="步骤一"></li>
<li>选择高级系统设置<a id="more"></a>
<img src="/2020/11/17/git-log%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%AD%A5%E9%AA%A4%E4%BA%8C.jpg" alt="步骤二"></li>
<li>选择高级，环境变量<br><img src="/2020/11/17/git-log%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%AD%A5%E9%AA%A4%E4%B8%89.jpg" alt="步骤三"></li>
<li>用户变量下，选择新建<br><img src="/2020/11/17/git-log%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%AD%A5%E9%AA%A4%E5%9B%9B.jpg" alt="步骤四"></li>
<li>输入变量名：LESSCHARSET，值：utf-8，点击确定<br><img src="/2020/11/17/git-log%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%AD%A5%E9%AA%A4%E4%BA%94.jpg" alt="步骤五"></li>
<li>新建完成后，在环境变量界面点击确定后生效<br><img src="/2020/11/17/git-log%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%AD%A5%E9%AA%A4%E5%85%AD.jpg" alt="步骤六"><h5 id="二、-终端中设置"><a href="#二、-终端中设置" class="headerlink" title="二、 终端中设置"></a>二、 终端中设置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath false </span><br><span class="line">git config --global gui.encoding utf-8</span><br><span class="line">git config --global i18n.commit.encoding utf-8 </span><br><span class="line">git config --global i18n.logoutputencoding utf-8 </span><br><span class="line"># bash 环境下</span><br><span class="line">export LESSCHARSET&#x3D;utf-8</span><br><span class="line"># cmd环境下：</span><br><span class="line">set LESSCHARSET&#x3D;utf-8</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>完成后的效果：<br><img src="/2020/11/17/git-log%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/%E5%AE%8C%E6%88%90%E5%90%8E%E6%95%88%E6%9E%9C.jpg" alt="完成后效果"></li>
</ul>
]]></content>
      <categories>
        <category>Git的学习</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>问题解决</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一个博客</title>
    <url>/2020/11/07/my-first-blog/</url>
    <content><![CDATA[<blockquote>
<p>学习前端以来，拥有的第一个博客，利用github+hexo搭建，此次为第一次上传文章。<br>博客配置指南：<a href="https://www.jianshu.com/p/3a05351a37dc">《Hexo的Next主题详细配置》</a><br>博客常见命令：<a href="https://blog.csdn.net/xuezhisdc/article/details/53130328">《hexo教程系列——hexo安装教程》</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>vue项目中刷新页面时的路由导航问题</title>
    <url>/2020/12/07/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2%E6%97%B6%E7%9A%84%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h4 id="问题描述：1-打开网站，进入指定路由，当前导航菜单高亮显示；2-点击导航菜单切换页面后，当前导航菜单高亮显示，再刷新页面，依旧显示当前页面。"><a href="#问题描述：1-打开网站，进入指定路由，当前导航菜单高亮显示；2-点击导航菜单切换页面后，当前导航菜单高亮显示，再刷新页面，依旧显示当前页面。" class="headerlink" title="问题描述：1.打开网站，进入指定路由，当前导航菜单高亮显示；2.点击导航菜单切换页面后，当前导航菜单高亮显示，再刷新页面，依旧显示当前页面。"></a>问题描述：1.打开网站，进入指定路由，当前导航菜单高亮显示；2.点击导航菜单切换页面后，当前导航菜单高亮显示，再刷新页面，依旧显示当前页面。</h4><ul>
<li>解决方法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. data数据中定义当前激活的路由值，动态绑定到导航菜单的default-active属性上</span><br><span class="line">data () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    activePath: &#39;&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">2. 导航菜单中定义点击事件，点击将在当前浏览器的sessionStorage中保存当前激活状态下的路由值</span><br><span class="line">methods: &#123;</span><br><span class="line">  saveCurrentActive (activePath) &#123;</span><br><span class="line">    window.sessionStorage.setItem(&#39;activePath&#39;, activePath)</span><br><span class="line">    this.activePath &#x3D; activePath</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">3. created钩子函数中，判断当前浏览器的sessionStorage中有无activePath，有则取该值，无则指定页面一打开时默认想要渲染的页面的路由值</span><br><span class="line">created () &#123;</span><br><span class="line">  if (!window.sessionStorage.getItem(&#39;activePath&#39;)) &#123;</span><br><span class="line">    &#x2F;&#x2F; 页面第一次加载时，sessionStorage中没有保存activePath，因此渲染默认页面</span><br><span class="line">    this.activePath &#x3D; &#39;question_page&#39;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    如果sessionStorage中有activePath的值，说明当前不是第一次渲染，则刷新浏览器，任显示当前页面</span><br><span class="line">    this.activePath &#x3D; window.sessionStorage.getItem(&#39;activePath&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Vue的学习</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>问题解决</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6中新的数据结构：Set()和Map()</title>
    <url>/2020/11/12/setAndMap/</url>
    <content><![CDATA[<h3 id="Set"><a href="#Set" class="headerlink" title="Set()"></a>Set()</h3><h4 id="接收数组参数，没有重复项，可以对数组进行去重"><a href="#接收数组参数，没有重复项，可以对数组进行去重" class="headerlink" title="接收数组参数，没有重复项，可以对数组进行去重"></a>接收数组参数，没有重复项，可以对数组进行去重</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s &#x3D; new Set([1, 1, 2, 3])</span><br><span class="line">let res &#x3D; [...s] </span><br><span class="line">console.log(res)       &#x2F;&#x2F; [1, 2, 3]</span><br></pre></td></tr></table></figure>
<h4 id="API：size-add-delete-hs-clear-forEach"><a href="#API：size-add-delete-hs-clear-forEach" class="headerlink" title="API：size/add/delete/hs/clear/forEach"></a>API：size/add/delete/hs/clear/forEach</h4><h4 id="求并集"><a href="#求并集" class="headerlink" title="求并集"></a>求并集</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a &#x3D; [1, 2, 3];</span><br><span class="line">let b &#x3D; [2, 3, 4];</span><br><span class="line">let c &#x3D; [...a, ...b];</span><br><span class="line">let cc &#x3D; new Set(c);</span><br><span class="line">let res &#x3D; [...cc];</span><br><span class="line">console.log(res)        &#x2F;&#x2F; [1, 2, 3, 4]</span><br></pre></td></tr></table></figure>
<h4 id="求交集"><a href="#求交集" class="headerlink" title="求交集"></a>求交集</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a &#x3D; [1, 2, 3];</span><br><span class="line">let b &#x3D; [2, 3, 4];</span><br><span class="line">let aa &#x3D; new Set(a);</span><br><span class="line">let bb &#x3D; new Set(b);</span><br><span class="line">let res &#x3D; [...aa].filter(function(item) &#123;</span><br><span class="line">  return bb.has(item)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(res)        &#x2F;&#x2F; [2, 3]</span><br></pre></td></tr></table></figure>
<h3 id="Map-WeakMap-：储存键值对的形式的数据，has表，散列"><a href="#Map-WeakMap-：储存键值对的形式的数据，has表，散列" class="headerlink" title="Map()/WeakMap()：储存键值对的形式的数据，has表，散列"></a>Map()/WeakMap()：储存键值对的形式的数据，has表，散列</h3><h4 id="key不能重复，通过set方法设置，get方法获取值"><a href="#key不能重复，通过set方法设置，get方法获取值" class="headerlink" title="key不能重复，通过set方法设置，get方法获取值"></a>key不能重复，通过set方法设置，get方法获取值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let map &#x3D; new Map();</span><br><span class="line">map.set(&#39;a&#39;, 1);</span><br><span class="line">map.set(&#39;b&#39;, 2);</span><br><span class="line">console.log(map);       &#x2F;&#x2F; Map(2) &#123;&quot;a&quot; &#x3D;&gt; 1, &quot;b&quot; &#x3D;&gt; 2&#125;</span><br><span class="line">map.get(&#39;a&#39;)            &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>
<h4 id="WeakMap-不会造成内存泄漏"><a href="#WeakMap-不会造成内存泄漏" class="headerlink" title="WeakMap()不会造成内存泄漏"></a>WeakMap()不会造成内存泄漏</h4>]]></content>
  </entry>
</search>
